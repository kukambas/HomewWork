memory.size()
memory.limit()
?memory.size()
memory.size(max = FALSE)
P<-perms(5)
libray(HW6)
library(HW6)
P<-perms(5)
P
1*2*3*4*5
G<-matrix(runif(100),10,10)
library(igraph)
G<-matrix(runif(100),10,10)
G1 <- graph.adjacency(G,mode = 'directed')
plot(G1)
G<-matrix(ifelse(runif(100)>0.7,1,0),10,10)
G1 <- graph.adjacency(G,mode = 'directed')
plot(G1)
?shortest.path(G1,1,)
?shortest.path
?mode
?perm
?perms
?shortestpath
library(HW6)
?mode
library(HW6)
library(HW6)
?mode
??HW6
devtools::use_vignette("my-vignette")
library(rmarkdown)
devtools::use_vignette("my-vignette")
devtools::use_vignette("my-vignette")
devtools::use_vignette("my-vignette")
install.packages(c("adabag", "caret", "digest", "e1071", "extraTrees", "foreach", "igraph", "iterators", "KernSmooth", "knitr", "magic", "manipulate", "moments", "numbers", "permute", "plotrix", "R.utils", "randomForest", "RColorBrewer", "Rcpp", "reshape2", "rgl", "rjags", "rJava", "rmarkdown", "scatterplot3d", "stringdist", "vegan", "zoo"))
?summary
devtools::use_vignette("my-vignette")
?use_vignette
?devtools
?devtools::use_vignette
?devtools::use_vignette("my-vignette")
devtools::use_vignette("my-vignette")
devtools::use_vignette("my-vignette",getwd())
devtools::use_vignette("my-vignette")
library(digest)
install.packages('digest')
install.packages("digest")
library(digest)
library(Rcpp)
install.packages('Rcpp')
library(Rcpp)
library(digest)
library(HW6)
library(HW6)
??HW6
devtools::build()
install.packages("C:/main/school/dokt/e-learning/AdvancedR/hw6/package/HW6_package1/HW6_1.0.tar.gz", repos = NULL, type = "source")
??HW6
library(HW6)
library(testthat)
?mode
mode('a')
expect_error(mode('a'))
library(HW6)
library(HW6)
library(HW6)
devtools::use_testthat()
library(testthat)
library(HW6)
test_check("HW6")
test_check("HW6")
library(testthat)
library(HW6)
test_check("HW6")
test_check("HW6")
library(testthat)
library(HW6)
test_check("HW6")
install.packages('igraph')
1
library(HW6)
library(HW6)
library(HW6)
library(HW6)
source('~/.active-rstudio-document')
library(HW6)
library(HW6)
numeric(0)
Rcpp::sourceCpp('src/modeFind.cpp')
Rcpp::sourceCpp('src/modeFind.cpp')
Rcpp::sourceCpp('C:/main/school/dokt/e-learning/AdvancedR/hw6/AdvancedR_hw6/AdvancedR_hw6/mode.cpp')
expect_error(mode('a'))
mode(numeric(0))
expect_error(mode(numeric(0)))
mode(1)
mode(c(1))
mode(c(1))
mode(c(1))
mode(c(1))
Rcpp::sourceCpp('C:/main/school/dokt/e-learning/AdvancedR/hw6/AdvancedR_hw6/AdvancedR_hw6/mode.cpp')
expect_equivalent(mode(c(1))
mode(c(1))
mode(c(1))
mode(c(1))
Rcpp::sourceCpp('C:/main/school/dokt/e-learning/AdvancedR/hw6/AdvancedR_hw6/AdvancedR_hw6/mode.cpp')
mode(c(1))
mode(1)
mode(2)
expect_equivalent(mode(1,1,1,1,1,2,2,2,2,2,3),1)
expect_equivalent(mode(c(1,1,1,1,1,2,2,2,2,2,3)),1)
expect_equivalent(mode(c(1.2,1.2,3,3,1,1,7,1.2,3,3)),3)
expect_equivalent(mode(c(1.2,1.2,3,3,-1,1,7,1.2,3,3)),3)
expect_error(mode(numeric(0)))
library(HW6)
mode('a')
expect_equivalent(mode(2),2)
mode(2)
library(HW6)
mode()
mode(c(1))
library(HW6)
library(HW6)
library(HW6)
library(HW6)
library(HW6)
library(HW6)
library(HW6)
library(HW6)
mode(c(1))
library(HW6)
Rcpp::sourceCpp('C:/main/school/dokt/e-learning/AdvancedR/hw6/AdvancedR_hw6/AdvancedR_hw6/mode.cpp')
Rcpp::sourceCpp('src/modeFind.cpp')
library(HW6)
Rcpp::sourceCpp('src/modeFind.cpp')
library(HW6)
library(HW6)
library(HW6)
perm(3)
library(HW6)
perm(3)
perms(3)
perms(0)
perms(0)
perms(-1)
expect_error(perms('a'))
library(testthat)
expect_error(perms('a'))
expect_error(perms(-1))
expect_equivalent(perms(1,2),matrix(c(1,2,2,1))
)
matrix(c(1,2,2,1),2,2)
expect_equivalent(perms(1,2),matrix(c(1,2,2,1),2,2))
expect_equivalent(perms(2),matrix(c(1,2,2,1),2,2))
expect_error(perms(1.5))
perms(1.5)
library(HW6)
expect_error(perms(1.5))
perms(1.5)
library(HW6)
expect_error(perms(1.5))
(perms(1.5)
perms(1.5)
perms(1.5)
perms(1)
perms(3)
G <- matrix(c(0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0),6,6)
G <- matrix(c(0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0),6,6)
shortestpath(G,1,2)
library(HW6)
shortestpath(G,1,2)
G <- matrix(c(0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0),6,6)
shortestpath(G,1,2)
G
shortestpath(G,1,2)
library(HW6)
shortestpath(G,1,2)
return(d[y]);
library(HW6)
shortestpath(G,1,2)
shortestpath(G,1,1)
shortestpath(G,1,7)
shortestpath(G,1,3)
shortestpath(G,1,5)
library(HW6)
shortestpath(G,1,2)
expect_equivalent(shortestpath(G,1,2),3)
expect_equivalent(shortestpath(G,1,1),numeric(0))
shortestpath(G,1,1)
expect_equivalent(shortestpath(G,1,1),0)
G <- matrix(1,3,5)
G
expect_error(shortestpath(G,1,2))
expect_error(shortestpath(G,0,2)
expect_error(shortestpath(G,0,2))
expect_error(shortestpath(G,1,0))
expect_error(shortestpath(G,1,7))
expect_error(shortestpath(G,7,2))
?modal
x rpois(100,2)
x<- rpois(100,2)
x
whihc.max(table(x))
which.max(table(x))
x
table(x)
which.max(table(x))
which.max(table(x))
t<-table(x)
which.max(t)
as.numeric(which.max(t))
names(t)[as.numeric(which.max(t))]
names(which.max(t))
as.numeric(names(which.max(t)))
modeR <- function(x)
t<-table(x)
as.numeric(names(which.max(t)))
}
modeR <- function(x){}
t<-table(x)
as.numeric(names(which.max(t)))
}
library(microbenchmark
)
x <- rpois(100,2)
mode(x)
microbenchmark(mode(x),modeR(x))
x <- rpois(100,2)
microbenchmark(mode(x),modeR(x))
x <- rpois(100,2)
microbenchmark(mode(x),modeR(x))
x <- rpois(1000,2)
microbenchmark(mode(x),modeR(x))
d<-microbenchmark(mode(x),modeR(x))
d
class(d)
install.packages("combinat")
library(combinat)
?combn
permn(3)
as.matrix(permn(3))
unlist(permn(3))
as.matrix(unlist(permn(3)))
permn(3)
simplify2array(permn(3))
?simplify2array(permn(3))
t(simplify2array(permn(3)))
perms(3)
perms(3)
library(combinat)
t(simplify2array(permn(3)))
perms(3)
library(HW6)
perms(3)
perms(4)
?microbenchmark
permn1 <- t(simplify2array(permn()))
G <- matrix(ifelse(runif(100)>0.5,1,0),10,10)
library(igraph)
G <- matrix(ifelse(runif(100)>0.5,1,0),10,10)
G1 <- graph.adjacency(G,mode = 'directed')
?shortest.path(, algorithm = '')
?shortest.path
(, algorithm = '')
?shortest_path
?shortest.paths
G <- matrix(ifelse(runif(100)>0.5,1,0),10,10)
G1 <- graph.adjacency(G,mode = 'directed')
x <- 1
y <-4
library(igraph)
shortest.paths(G1,x,y, algorithm = '"dijkstra"')
shortestpath(G,x,y)
shortest.paths(G1,x,y, algorithm = 'dijkstra')
shortestpath(G,x,y)
library(HW6)
library(HW6)
library(HW6)
library(HW6)
devtool::build()
devtools::build()
install.packages("C:/main/school/dokt/e-learning/AdvancedR/hw6/package/HW6_package1/HW6_1.0.tar.gz", repos = NULL, type = "source")
devtools::install_github("kukambas/HomewWork.git")
devtools::install_github("kukambas/HomewWork")
devtools::install_github("kukambas/HomewWork")
library(HW6)
devtools::install_github("kukambas/HomewWork")
devtools::install_github("kukambas/HomewWork")
library(HW6)
